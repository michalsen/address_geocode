Address GEOCODE
Using a Wordpress save_post action

```bash
add_action('save_post', 'geolocate', 10, 3);

// GRAB ADDRESS AND SAVE LAT/LNG
function geolocate($post_id, $post, $update)
{
    $latlon = address_geocode(
        $_POST["acf"]["field_5efa47c5718ba"],
        $_POST["acf"]["field_5efa47e0718bc"],
        $_POST["acf"]["field_5efa3f026b48e"]
    );
    update_field('field_5f2c2b39e5a39', $latlon["longitude"], $post_id);
    update_field('field_5f2c2b41e5a3a', $latlon["latitude"], $post_id);
}

// GEOCODE ADDRESS FOR LAT/LNG
function address_geocode($street_address, $city, $state)
{

    $api = getXML();
    $apiKey = $api[0]->api_key;

    $street_address = str_replace(" ", "+", $street_address); //google doesn't like spaces in urls, but who does?
    $city = str_replace(" ", "+", $city);
    $state = str_replace(" ", "+", $state);

    $url = "https://maps.googleapis.com/maps/api/geocode/json?address=$street_address,$city,$state&sensor=false&key=$apiKey";

    $google_api_response = wp_remote_get($url);

    $results = json_decode($google_api_response['body']); //grab our results from Google
    $results = (array) $results; //cast them to an array
    $status = $results["status"]; //easily use our status
    $location_all_fields = (array) $results["results"][0];
    $location_geometry = (array) $location_all_fields["geometry"];
    $location_lat_long = (array) $location_geometry["location"];

    if ($status == 'OK') {
        $latitude = $location_lat_long["lat"];
        $longitude = $location_lat_long["lng"];
    } else {
        $latitude = '';
        $longitude = '';
    }

    $return = array(
        'latitude'  => $latitude,
        'longitude' => $longitude
    );

    return $return;
}
```


CALCULATE FARTHEST DISTANCE from an array of Lat/Lons
```
function distanceto(lat1, lon1, lat2, lon2, latLongPair) {
    var radlat1 = Math.PI * lat1/180
    var radlat2 = Math.PI * lat2/180
    var theta = lon1-lon2
    var radtheta = Math.PI * theta/180
    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
    dist = Math.acos(dist)
    dist = dist * 180/Math.PI
    dist = dist * 60 * 1.1515
    return [dist, latLongPair];
}
```
